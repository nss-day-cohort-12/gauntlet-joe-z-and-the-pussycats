{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/app.js","javascripts/classes.js","javascripts/createMonster.js","javascripts/doBattle.js","javascripts/enemies.js","javascripts/player.js","javascripts/spells.js","javascripts/weapons.js"],"names":[],"mappingsrhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\n// declare global variables that will be used in player constructor\r\nlet playerName;\r\nlet playerClass;\r\nlet playerWeapon;\r\nlet P1,P2;\r\n\r\nlet Gauntlet = {};\r\n\r\nGauntlet.Armory = require('./weapons');\r\nconsole.log(`Armory Test: `, Gauntlet.Armory);\r\nGauntlet.SpellBook = require('./spells');\r\nconsole.log(`SpellBook Test: `, Gauntlet.SpellBook);\r\nGauntlet.GuildHall = require('./classes');\r\nconsole.log(`GuildHall Test: `, Gauntlet.GuildHall);\r\n\r\nGauntlet.Combatants = require('./enemies');\r\nconsole.log(`Combatants Test: `, Gauntlet.Combatants);\r\n\r\nlet createMonster = require('./createMonster');\r\nlet doBattle = require('./doBattle');\r\n\r\nconsole.log(`Gauntlet on app.js : `, Gauntlet);\r\n\r\nmodule.exports = Gauntlet;\r\n\r\n$(document).ready(function() {\r\n  /*\r\n    Show the initial view that accepts player name\r\n   */\r\n  $(\"#player-setup\").show();\r\n\r\n  /*\r\n    When any button with card__link class is clicked,\r\n    move on to the next view.\r\n   */\r\n  $(\".card__link\").click(function(e) {\r\n    let nextCard = $(this).attr(\"next\");\r\n    let moveAlong = false;\r\n\r\n    switch (nextCard) {\r\n      case \"card--class\":\r\n        moveAlong = ($('#player-name').val() !== \"\");\r\n        break;\r\n      case \"card--weapon\":\r\n        moveAlong = playerClass;\r\n        break;\r\n      case \"card--battleground\":\r\n        moveAlong = playerWeapon;\r\n        break;\r\n    }\r\n\r\n    if (moveAlong) {\r\n      $(\".card\").hide();\r\n      $(\".\" + nextCard).show();\r\n    }\r\n\r\n    if (nextCard == \"card--class\") {\r\n      P1 = new Gauntlet.Combatants.Human();\r\n      $(\".class\").hide();\r\n      $(\"#surprise\").show();\r\n      for (let i = 0; i < P1.allowedClasses.length; i++) {\r\n        let currClass = P1.allowedClasses[i].toLowerCase();\r\n        if ($(`.card__button#${currClass}`)) {\r\n          $(`.card__button#${currClass}`).show();\r\n        }\r\n      }\r\n    }\r\n\r\n    if (nextCard == \"card--weapon\") {\r\n      P1.class = playerClass;\r\n      if (P1.class.magical) {\r\n        $(\"#weapon-select\").hide();\r\n        $(\"#spell-select\").show();\r\n      } else {\r\n        $(\"#weapon-select\").show();\r\n        $(\"#spell-select\").hide();\r\n      }\r\n    }\r\n\r\n    if (nextCard == \"card--battleground\") {\r\n      P1.playerName = playerName;\r\n      P1.possessivePronoun = \"his\";\r\n      P1.weapon = playerWeapon;\r\n      P2 = createMonster();\r\n      P1.originalHealth = P1.health;\r\n      P2.originalHealth = P2.health;\r\n      P1.playerNum = 1;\r\n      P2.playerNum = 2;\r\n      fillPlayers();\r\n      doBattle(P1,P2);\r\n    }\r\n  });\r\n\r\n  /*\r\n    When the back button clicked, move back a view\r\n   */\r\n  $(\".card__back\").click(function(e) {\r\n    let previousCard = $(this).attr(\"previous\");\r\n    $(\".card\").hide();\r\n    $(\".\" + previousCard).show();\r\n  });\r\n\r\n  // Store player name based on entry, on button click\r\n  $(\"[next='card--class']\").on('click', function(e) {\r\n    playerName = $('#player-name').val();\r\n  });\r\n\r\n  // Store player class based on user selection\r\n  $('.class').on('click', function (e) {\r\n    switch (e.currentTarget.id) {\r\n      case 'warrior':\r\n        playerClass = new Gauntlet.GuildHall.Warrior();\r\n        break;\r\n      case 'valkyrie':\r\n        playerClass = new Gauntlet.GuildHall.Valkyrie();\r\n        break;\r\n      case 'berserker':\r\n        playerClass = new Gauntlet.GuildHall.Berserker();\r\n        break;\r\n      case 'monk':\r\n        playerClass = new Gauntlet.GuildHall.Monk();\r\n        break;\r\n      case 'shaman':\r\n        playerClass = new Gauntlet.GuildHall.Shaman();\r\n        break;\r\n      case 'wizard':\r\n        playerClass = new Gauntlet.GuildHall.Wizard();\r\n        break;\r\n      case 'conjurer':\r\n        playerClass = new Gauntlet.GuildHall.Conjurer();\r\n        break;\r\n      case 'sorcerer':\r\n        playerClass = new Gauntlet.GuildHall.Sorcerer();\r\n        break;\r\n      case 'thief':\r\n        playerClass = new Gauntlet.GuildHall.Thief();\r\n        break;\r\n      case 'ninja':\r\n        playerClass = new Gauntlet.GuildHall.Ninja();\r\n        break;\r\n      case 'assassin':\r\n        playerClass = new Gauntlet.GuildHall.Assassin();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  $('#surprise').click(function() {\r\n    playerClass = P1.generateClass();\r\n  });\r\n\r\n  // Store player weapon based on user selection\r\n  $('.weapon').on('click', function (e) {\r\n    switch (e.currentTarget.id) {\r\n      case 'dagger':\r\n        playerWeapon = new Gauntlet.Armory.Dagger();\r\n        break;\r\n      case 'broad-sword':\r\n        playerWeapon = new Gauntlet.Armory.BroadSword();\r\n        break;\r\n      case 'war-axe':\r\n        playerWeapon = new Gauntlet.Armory.WarAxe();\r\n        break;\r\n      case 'sphere':\r\n        playerWeapon = new Gauntlet.SpellBook.Sphere();\r\n        break;\r\n      case 'cube':\r\n        playerWeapon = new Gauntlet.SpellBook.Cube();\r\n        break;\r\n      case 'tetrahedron':\r\n        playerWeapon = new Gauntlet.SpellBook.Tetrahedron();\r\n        break;\r\n      case 'cloud':\r\n        playerWeapon = new Gauntlet.SpellBook.Cloud();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n});\r\n\r\nfunction fillPlayers() {\r\n  $(\".human h2\").html(P1.playerName);\r\n  $(\".monster h2\").html(P2.playerName);\r\n  let desc = `A ${P1.skinColor} skinned ${P1.species} ${P1.class.name} with ${P1.health} health.`;\r\n  if (P1.class.magical) {\r\n    desc += ` Able to cast ${P1.weapon.name} of ${P1.weapon.type}!`;\r\n  } else {\r\n    desc += ` Wielding a nasty ${P1.weapon.name}!`;\r\n  }\r\n  $(\".human .description\").html(desc);\r\n  $(\".human .stat1\").html(\"Str: \" + P1.strength);\r\n  $(\".human .stat2\").html(\"Int: \" + P1.intelligence);\r\n  $(\".human .stat3\").html(\"Agil: \" + P1.agility);\r\n  desc = `A ${P2.skinColor} skinned ${P2.species} ${P2.class.name} with ${P2.health} health.`;\r\n  if (P2.class.magical) {\r\n    desc += ` Able to cast ${P2.weapon.name} of ${P2.weapon.type}!`;\r\n  } else {\r\n    desc += ` Wielding a nasty ${P2.weapon.name}!`;\r\n  }\r\n  $(\".monster .description\").html(desc);\r\n  $(\".monster .stat1\").html(\"Str: \" + P2.strength);\r\n  $(\".monster .stat2\").html(\"Int: \" + P2.intelligence);\r\n  $(\".monster .stat3\").html(\"Agil: \" + P2.agility);\r\n}","'use strict';\r\n\r\nlet Gauntlet = {};\r\nGauntlet.GuildHall = {};\r\n\r\nmodule.exports = Gauntlet.GuildHall;\r\n\r\n/*\r\n  Base function for a player, or enemy, class (profession)\r\n */\r\nGauntlet.GuildHall.PlayerClass = function() {\r\n  this.name = \"Beggar\";\r\n  this.healthBonus = 0;\r\n  this.strengthBonus = 0;\r\n  this.intelligenceBonus = 0;\r\n  this.agilityBonus = 0;\r\n  this.magical = false;\r\n\r\n  this.toString = function() {\r\n    return this.name;\r\n  };\r\n};\r\n\r\nGauntlet.GuildHall.Fighter = function() {\r\n  this.healthBonus = 20;\r\n  this.strengthBonus = 10;\r\n};\r\nGauntlet.GuildHall.Fighter.prototype = new Gauntlet.GuildHall.PlayerClass();\r\n\r\n\r\nGauntlet.GuildHall.Warrior = function() {\r\n  this.name = \"Warrior\";\r\n  this.healthBonus = this.healthBonus + 25;\r\n  this.strengthBonus = this.strengthBonus + 30;\r\n};\r\nGauntlet.GuildHall.Warrior.prototype = new Gauntlet.GuildHall.Fighter();\r\n\r\n\r\nGauntlet.GuildHall.Valkyrie = function() {\r\n  this.name = \"Valkyrie\";\r\n  this.healthBonus = this.healthBonus + 20;\r\n  this.strengthBonus = this.strengthBonus + 10;\r\n};\r\nGauntlet.GuildHall.Valkyrie.prototype = new Gauntlet.GuildHall.Fighter();\r\n\r\n\r\nGauntlet.GuildHall.Berserker = function() {\r\n  this.name = \"Berserker\";\r\n  this.healthBonus = this.healthBonus + 35;\r\n  this.strengthBonus = this.strengthBonus + 20;\r\n};\r\nGauntlet.GuildHall.Berserker.prototype = new Gauntlet.GuildHall.Fighter();\r\n\r\n\r\nGauntlet.GuildHall.Monk = function() {\r\n  this.name = \"Monk\";\r\n  this.healthBonus = this.healthBonus + 10;\r\n  this.strengthBonus = this.strengthBonus + 40;\r\n};\r\nGauntlet.GuildHall.Monk.prototype = new Gauntlet.GuildHall.Fighter();\r\n\r\nGauntlet.GuildHall.Mage = function() {\r\n  this.name = \"Mage\";\r\n  this.magical = true;\r\n  this.healthBonus = this.healthBonus - 10;\r\n  this.strengthBonus = this.strengthBonus - 20;\r\n  this.intelligenceBonus = this.intelligenceBonus + 20;\r\n};\r\nGauntlet.GuildHall.Mage.prototype = new Gauntlet.GuildHall.PlayerClass();\r\n\r\n\r\nGauntlet.GuildHall.Shaman = function() {\r\n  this.name = \"Shaman\";\r\n  this.healthBonus = this.healthBonus + 5;\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 20;\r\n};\r\nGauntlet.GuildHall.Shaman.prototype = new Gauntlet.GuildHall.Mage();\r\n\r\n\r\nGauntlet.GuildHall.Wizard = function() {\r\n  this.name = \"Wizard\";\r\n  this.healthBonus = this.healthBonus - 15;\r\n  this.strengthBonus = this.strengthBonus - 25;\r\n  this.intelligenceBonus = this.intelligenceBonus + 40;\r\n};\r\nGauntlet.GuildHall.Wizard.prototype = new Gauntlet.GuildHall.Mage();\r\n\r\n\r\nGauntlet.GuildHall.Conjurer = function() {\r\n  this.name = \"Conjurer\";\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 10;\r\n};\r\nGauntlet.GuildHall.Conjurer.prototype = new Gauntlet.GuildHall.Mage();\r\n\r\n\r\nGauntlet.GuildHall.Sorcerer = function() {\r\n  this.name = \"Sorcerer\";\r\n  this.healthBonus = this.healthBonus - 5;\r\n  this.strengthBonus = this.strengthBonus - 20;\r\n  this.intelligenceBonus = this.intelligenceBonus + 30;\r\n};\r\nGauntlet.GuildHall.Sorcerer.prototype = new Gauntlet.GuildHall.Mage();\r\n\r\nGauntlet.GuildHall.Eluder = function() {\r\n  this.name = \"Eluder\";\r\n  this.magical = false;\r\n  this.agilityBonus = this.agilityBonus + 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 35;\r\n};\r\n\r\nGauntlet.GuildHall.Eluder.prototype = new Gauntlet.GuildHall.PlayerClass();\r\n\r\nGauntlet.GuildHall.Thief = function() {\r\n  this.name = \"Thief\";\r\n  this.agilityBonus = this.agilityBonus + 5;\r\n  this.intelligenceBonus = this.intelligenceBonus + 10;\r\n};\r\nGauntlet.GuildHall.Thief.prototype = new Gauntlet.GuildHall.Eluder();\r\n\r\n\r\nGauntlet.GuildHall.Ninja = function() {\r\n  this.name = \"Ninja\";\r\n  this.agilityBonus = this.agilityBonus + 20;\r\n  this.intelligenceBonus = this.intelligenceBonus + 5;\r\n};\r\nGauntlet.GuildHall.Ninja.prototype = new Gauntlet.GuildHall.Eluder();\r\n\r\n\r\nGauntlet.GuildHall.Assassin = function() {\r\n  this.name = \"Assassin\";\r\n  this.agilityBonus = this.agilityBonus + 10;\r\n  this.healthBonus = this.healthBonus - 5;\r\n  this.intelligenceBonus = this.intelligenceBonus + 5;\r\n};\r\nGauntlet.GuildHall.Assassin.prototype = new Gauntlet.GuildHall.Eluder();\r\n\r\n\r\n","'use strict';\r\n\r\nlet Gauntlet = require(\"./app\");\r\nGauntlet.Armory = require('./weapons');\r\nGauntlet.SpellBook = require('./spells');\r\nGauntlet.GuildHall = require('./classes');\r\nGauntlet.Combatants = require('./enemies');\r\n\r\nconsole.log(`Gauntlet createMonster: `, Gauntlet);\r\n\r\nmodule.exports = createMonster;\r\n\r\nfunction createMonster() {\r\n  // create P2, a monster, randomly\r\n  let monsters = [\"Orc\", \"Hobgoblin\", \"Ogre\"];\r\n  // Create a new random monster from the monsters array\r\n  let P2 = new Gauntlet.Combatants[monsters[randomNumber(monsters)]]();\r\n  let monsterNames = [{name:\"Pauly Shore\",       possessivePronoun:\"his\"},\r\n                      {name:\"Elvira\",            possessivePronoun:\"her\"},\r\n                      {name:\"Stephen Baldwin\",   possessivePronoun:\"his\"},\r\n                      {name:\"Gary Busey\",        possessivePronoun:\"his\"},\r\n                      {name:\"Dolph Lundgren\",    possessivePronoun:\"his\"},\r\n                      {name:\"Dennis Rodman\",     possessivePronoun:\"his\"},\r\n                      {name:\"Snooki\",            possessivePronoun:\"her\"},\r\n                      {name:\"Amy Winehouse\",     possessivePronoun:\"her\"},\r\n                      {name:\"William Shatner\",   possessivePronoun:\"his\"} ];\r\n  // Get the string at the index\r\n  let monsterNum = randomNumber(monsterNames);\r\n  P2.playerName = monsterNames[monsterNum].name;\r\n  P2.possessivePronoun = monsterNames[monsterNum].possessivePronoun;\r\n  P2.class = P2.generateClass();\r\n\r\n  let weapons, randomWeapon;\r\n\r\n  // assign P2 a random weapon or spell\r\n  if (P2.class.magical) {\r\n    weapons = [\"Sphere\", \"Cube\", \"Tetrahedron\", \"Cloud\"];\r\n    // Select a random weapon from the magic weapons array\r\n    randomWeapon = weapons[randomNumber(weapons)];\r\n    P2.setWeapon(new Gauntlet.SpellBook[randomWeapon]());\r\n  } else {\r\n    weapons = [\"Dagger\", \"BroadSword\", \"WarAxe\"];\r\n    // Select a random weapon from the melee weapons array\r\n    randomWeapon = weapons[randomNumber(weapons)];\r\n    P2.setWeapon(new Gauntlet.Armory[randomWeapon]());\r\n  }\r\n\r\n  return P2;\r\n}\r\n\r\n// Returns random number between 0 and the length of the passed array\r\nfunction randomNumber (array) {\r\n  return  Math.floor(Math.random() * array.length);\r\n}","'use strict';\r\n\r\nmodule.exports = doBattle;\r\n\r\nfunction doBattle(P1,P2) {\r\n  // P1 is the player's character\r\n  report(`You are ${P1.playerName}, a ${P1.skinColor} skinned ${P1.species} ${P1.class.name} with ${P1.health} health.`);\r\n  if (P1.class.magical) {\r\n    report(`${P1.playerName} is able to cast ${P1.weapon.name} of ${P1.weapon.type}!`);\r\n  } else {\r\n    report(`${P1.playerName} is wielding a nasty ${P1.weapon.name}!`);\r\n  }\r\n  // P2 is the monster\r\n  report(`Your opponent is ${P2.playerName}, a ${P2.skinColor} skinned ${P2.species} ${P2.class.name} with ${P2.health} health.`);\r\n  if (P2.class.magical) {\r\n    report(`${P2.playerName} is able to cast ${P2.weapon.name} of ${P2.weapon.type}!`);\r\n  } else {\r\n    report(`${P2.playerName} is wielding a nasty ${P2.weapon.name}!`);\r\n  }\r\n\r\n  report(\"It's on!!!\");\r\n\r\n  let playerAttacking = coinFlip() + 1;  // 1 or 2\r\n  let goesFirst = playerAttacking === 1 ? P1.playerName : P2.playerName;\r\n  let doAnotherAttack;\r\n\r\n  report(`${goesFirst} wins the coin flip and will go first.`);\r\n  report(\". . .\",\"center\");\r\n\r\n  if (playerAttacking === 2) {\r\n    doAnotherAttack = attack(P2,P1);\r\n    if (!doAnotherAttack) {\r\n      gameOver();\r\n    }\r\n  }\r\n\r\n  // activate listener on \"Attack\" button\r\n  $(\"#attackBtn\").on(\"click\",function(){\r\n    doAnotherAttack = attack(P1,P2);  // player attacks monster\r\n    if(!doAnotherAttack) {\r\n      gameOver();\r\n    } else {\r\n      doAnotherAttack = attack(P2,P1);  // monster attacks player\r\n      if(!doAnotherAttack) {\r\n        gameOver();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction gameOver() {\r\n  report(\" * * * GAME OVER * * *\",\"center\");\r\n  $(\"#attackBtn\").prop(\"disabled\",true);  // disable Attack button\r\n  $(\"#attackBtn\").off(\"click\");  // turn off event listener\r\n}\r\n\r\nfunction coinFlip() {\r\n  return Math.floor(Math.random() * 2);  // 0 or 1\r\n}\r\n\r\nfunction attack(attacker,defender) {\r\n  let justification = attacker.playerNum === 1 ? \"left\" : \"right\";\r\n  report(`${attacker.playerName} is attacking ${defender.playerName}.`,justification);\r\n\r\n  if (attacker.class.magical) {\r\n    report(`${attacker.playerName} casts a ${attacker.weapon.name} of ${attacker.weapon.type}...`,justification);\r\n  } else {\r\n    report(`${attacker.playerName} lunges with ${attacker.possessivePronoun} ${attacker.weapon.name}...`,justification);\r\n  }\r\n\r\n  // does defender successfully evade?\r\n  if (rollDice() <= defender.agility) {\r\n    report(`${defender.playerName} evades the attack!  Zero damage.`,justification);\r\n    report(\". . .\",\"center\");  // blank line\r\n    return true;  // doAnotherAttack = true\r\n  }\r\n\r\n  // defender takes damage\r\n  let damage = Math.floor(Math.random() * attacker.weapon.damage + 1);  // base damage\r\n  if (attacker.class.magical) {\r\n    damage += Math.round(damage * attacker.intelligence / 50);  // damage adjustment\r\n    report(`and does ${damage} points of damage!`,justification);\r\n  } else {\r\n    damage += Math.round(damage * attacker.strength / 50);  // damage adjustment\r\n    // Get a random index from the limbs array\r\n    let random = Math.floor(Math.random() * defender.limbs.length);\r\n    // Get the string at the index\r\n    let randomLimb = defender.limbs[random];\r\n    report(`and strikes ${defender.playerName} in the ${randomLimb} for ${damage} points of damage!`,justification);\r\n  }\r\n  report(`${defender.playerName} goes from ${defender.health} health to ${defender.health - damage} health.`,justification);\r\n  report(\". . .\",\"center\");  // blank line\r\n  defender.health -= damage;\r\n  let pct = Math.round(100 * (defender.health / defender.originalHealth));\r\n  if (pct < 0) {\r\n    pct = 0;\r\n  }\r\n  if (defender.playerNum == 2) {  // defender is monster?\r\n    $(\".monster .bar\").css(\"width\",`${pct}%`);\r\n  } else {\r\n    $(\".human .bar\").css(\"width\",`${pct}%`);\r\n  }\r\n\r\n  // did defender die?\r\n  if (defender.health <= 0) {\r\n    report(`${attacker.playerName} has defeated ${defender.playerName}!`,\"center\");\r\n    return false;  // don't do another attack -- it's over!\r\n  } else {\r\n    return true;  // doAnotherAttack = true\r\n  }\r\n}\r\n\r\nfunction rollDice() {\r\n  return Math.floor(Math.random() * 100);  // 0 to 99\r\n}\r\n\r\nfunction report(text,justification) {\r\n  if (!justification) {\r\n    justification = \"left\";\r\n  }\r\n  let oldTxt = $(\".combat-log-text\").html();\r\n  $(\".combat-log-text\").html(oldTxt + `<p style='text-align:${justification}'>${text}</p>`);\r\n  $(\".combat-log\").scrollTop($(\".combat-log-text\").height());\r\n  console.log(text);\r\n}","'use strict';\r\n\r\nlet Gauntlet = require(\"./player\");\r\n\r\nconsole.log(`enemies Gauntlet test: `, Gauntlet);\r\nmodule.exports = Gauntlet.Combatants;\r\n\r\nGauntlet.Combatants.Orc = function() {\r\n  this.health = this.health + 20;\r\n  this.species = \"Orc\";\r\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Wizard\", \"Valkyrie\"];\r\n\r\n  this.generateClass = function() {\r\n    // Get a random index from the allowed classes array\r\n    let random = Math.round(Math.random() * (this.allowedClasses.length - 1));\r\n\r\n    // Get the string at the index\r\n    let randomClass = this.allowedClasses[random];\r\n\r\n    // Composes the corresponding player class into the player object\r\n    this.class = new Gauntlet.GuildHall[randomClass]();\r\n    return this.class;\r\n  };\r\n};\r\nGauntlet.Combatants.Orc.prototype = new Gauntlet.Combatants.Monster();\r\n\r\nGauntlet.Combatants.Hobgoblin = function() {\r\n  this.health = this.health + 35;\r\n  this.agility = this.agility - 10;\r\n  this.species = \"Hobgoblin\";\r\n  this.allowedClasses = [\"Assassin\", \"Berserker\", \"Shaman\", \"Ninja\"];\r\n\r\n  this.generateClass = function() {\r\n    // Get a random index from the allowed classes array\r\n    let random = Math.round(Math.random() * (this.allowedClasses.length - 1));\r\n\r\n    // Get the string at the index\r\n    let randomClass = this.allowedClasses[random];\r\n\r\n    // Composes the corresponding player class into the player object\r\n    this.class = new Gauntlet.GuildHall[randomClass]();\r\n    return this.class;\r\n  };\r\n};\r\nGauntlet.Combatants.Hobgoblin.prototype = new Gauntlet.Combatants.Monster();\r\n\r\nGauntlet.Combatants.Ogre = function() {\r\n  this.health = this.health + 50;\r\n  this.agility = this.agility -20;\r\n  this.species = \"Ogre\";\r\n  this.allowedClasses = [\"Warrior\", \"Sorcerer\", \"Monk\", \"Assassin\"];\r\n\r\n  this.generateClass = function() {\r\n    // Get a random index from the allowed classes array\r\n    let random = Math.round(Math.random() * (this.allowedClasses.length - 1));\r\n\r\n    // Get the string at the index\r\n    let randomClass = this.allowedClasses[random];\r\n\r\n    // Composes the corresponding player class into the player object\r\n    this.class = new Gauntlet.GuildHall[randomClass]();\r\n    return this.class;\r\n  };\r\n};\r\nGauntlet.Combatants.Ogre.prototype = new Gauntlet.Combatants.Monster();","'use strict';\r\n\r\nlet Gauntlet = {};\r\nGauntlet.GuildHall = require(\"./classes\");\r\nGauntlet.Combatants = {};\r\nconsole.log(`Gauntlet on player: `, Gauntlet);\r\nconsole.log(`GuildHall on player: `, Gauntlet.GuildHall);\r\n\r\nmodule.exports = Gauntlet;\r\n\r\nGauntlet.Combatants.Player = function(name) {\r\n  this.species = null;\r\n  this.class = null;\r\n  this.weapon = null;\r\n\r\n  this.playerName = name || \"unknown adventurer\";\r\n  this.health = Math.floor(Math.random() * 40 + 1 + 50);  // i.e. 1-40 plus 50\r\n  this.limbs = [\"head\", \"neck\", \"arm\", \"leg\", \"torso\"];\r\n  this.skinColors = [\"goldenrod\", \"cornflowerBlue\", \"chartreuse\", \"salmon\", \"lawnGreen\", \"fuchsia\", \"azure\", \"ghostWhite\", \"honeydew\"];\r\n  // Get a random index from the skinColors array\r\n  let random = Math.floor(Math.random() * this.skinColors.length);\r\n  // Get the string at the index\r\n  this.skinColor = this.skinColors[random];\r\n  this.strength = 90;\r\n  this.intelligence = 90;\r\n  this.agility = 50;\r\n  this.toString = function() {\r\n    let output = [this.playerName,\r\n      \": a \",\r\n      this.skinColor,\r\n      \" skinned \",\r\n      this.species,\r\n      \" \",\r\n      this.class,\r\n      \" with \",\r\n      this.health,\r\n      \" health. \",\r\n      (this.class.magical) ? \"Able to cast \" : \" Wielding a \",\r\n      \"!\"\r\n    ].join(\"\");\r\n    return output;\r\n  };\r\n};\r\n\r\nGauntlet.Combatants.Player.prototype.setWeapon = function(newWeapon) {\r\n  this.weapon = newWeapon;\r\n};\r\n\r\nGauntlet.Combatants.Player.prototype.generateClass = function() {\r\n  // Get a random index from the allowed classes array\r\n  let random = Math.round(Math.random() * (this.allowedClasses.length - 1));\r\n\r\n  // Get the string at the index\r\n  let randomClass = this.allowedClasses[random];\r\n\r\n  // Composes the corresponding player class into the player object\r\n  this.class = new Gauntlet.GuildHall[randomClass]();\r\n\r\n  // Add the bonuses\r\n  this.health += this.class.healthBonus;\r\n  this.strength += this.class.strengthBonus;\r\n  this.intelligence += this.class.intelligenceBonus;\r\n  this.agility += this.class.agilityBonus;\r\n\r\n  return this.class;\r\n};\r\n\r\nGauntlet.Combatants.Human = function() {\r\n  let randomSkin;\r\n\r\n  this.species = \"Human\";\r\n  this.intelligence = this.intelligence + 20;\r\n\r\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Wizard\", \"Monk\", \"Ninja\", \"Thief\", \"Sorcerer\"];\r\n};\r\nGauntlet.Combatants.Human.prototype = new Gauntlet.Combatants.Player();\r\n\r\nGauntlet.Combatants.Monster = function() {\r\n  this.health = this.health - 30;\r\n  this.intelligence = this.intelligence -20;\r\n  this.strength = this.strength + 30;\r\n};\r\n\r\nGauntlet.Combatants.Monster.prototype = new Gauntlet.Combatants.Player();","'use strict';\r\n\r\nlet Gauntlet = {};\r\nGauntlet.SpellBook = {};\r\n\r\nmodule.exports = Gauntlet.SpellBook;\r\n\r\n\r\n/*\r\n  Base spell function that defines name, damage, damage type\r\n */\r\nGauntlet.SpellBook.Spell = function() {\r\n  this.name = \"\";\r\n  this.damage = 0;\r\n\r\n  this.damageTypes = [\"lightning\", \"fire\", \"water\", \"earth\", \"mysticism\"];\r\n  this.type = \"\";\r\n\r\n  this.toString = function() {\r\n    return this.name + \" of \" + this.type + \" for \" + this.damage + \" damage!\";\r\n  };\r\n};\r\n\r\n/*\r\n  An elemental sphere that can be cast by a magical class\r\n */\r\nGauntlet.SpellBook.Sphere = function() {\r\n  this.name = \"sphere\";\r\n  this.damage = Math.floor(Math.random() * 10 + 10);\r\n\r\n  let random = Math.round(Math.random() * (this.damageTypes.length - 1));\r\n  this.type = this.damageTypes[random];\r\n};\r\nGauntlet.SpellBook.Sphere.prototype = new Gauntlet.SpellBook.Spell();\r\n\r\n/*\r\n  An elemental sphere that can be cast by a magical class\r\n */\r\nGauntlet.SpellBook.Cube = function() {\r\n  this.name = \"cube\";\r\n  this.damage = Math.floor(Math.random() * 11 + 10);\r\n\r\n  let random = Math.round(Math.random() * (this.damageTypes.length - 1));\r\n  this.type = this.damageTypes[random];\r\n};\r\nGauntlet.SpellBook.Cube.prototype = new Gauntlet.SpellBook.Spell();\r\n/*\r\n  An elemental sphere that can be cast by a magical class\r\n */\r\nGauntlet.SpellBook.Tetrahedron = function() {\r\n  this.name = \"tetrahedron\";\r\n  this.damage = Math.floor(Math.random() * 12 + 10);\r\n\r\n  let random = Math.round(Math.random() * (this.damageTypes.length - 1));\r\n  this.type = this.damageTypes[random];\r\n};\r\nGauntlet.SpellBook.Tetrahedron.prototype = new Gauntlet.SpellBook.Spell();\r\n\r\n/*\r\n  An elemental cloud that can be cast by a magical class\r\n */\r\nGauntlet.SpellBook.Cloud = function() {\r\n  this.name = \"cloud\";\r\n  this.damage = Math.floor(Math.random() * 13 + 10);\r\n\r\n  let random = Math.round(Math.random() * (this.damageTypes.length - 1));\r\n  this.type = this.damageTypes[random];\r\n};\r\nGauntlet.SpellBook.Cloud.prototype = new Gauntlet.SpellBook.Spell();","'use strict';\r\n\r\nlet Gauntlet = {};\r\nGauntlet.Armory = {};\r\n\r\nGauntlet.Armory.Weapon = function() {\r\n  this.name = \"bare hands\";\r\n  this.damage = 1;\r\n  this.hands = 2;\r\n\r\n  this.toString = function() {\r\n    return this.name;\r\n  };\r\n};\r\n\r\nGauntlet.Armory.Dagger = function() {\r\n  this.name = \"dagger\";\r\n  this.damage = 10;\r\n  this.hands = 1;\r\n};\r\nGauntlet.Armory.Dagger.prototype = new Gauntlet.Armory.Weapon();\r\n\r\nGauntlet.Armory.BroadSword = function() {\r\n  this.name = \"broad sword\";\r\n  this.damage = 14;\r\n  this.hands = 2;\r\n};\r\nGauntlet.Armory.BroadSword.prototype = new Gauntlet.Armory.Weapon();\r\n\r\nGauntlet.Armory.WarAxe = function() {\r\n  this.name = \"war axe\";\r\n  this.damage = 18;\r\n  this.hands = 2;\r\n};\r\nGauntlet.Armory.WarAxe.prototype = new Gauntlet.Armory.Weapon();\r\n\r\nmodule.exports = Gauntlet.Armory;\r\n"]}