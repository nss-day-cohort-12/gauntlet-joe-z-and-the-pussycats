{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/app.js","javascripts/classes.js","javascripts/combatants.js","javascripts/gauntlet.js","javascripts/spells.js","javascripts/weapons.js"],"names":[],"mappingsvhlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nconst Gauntlet = require('./gauntlet');\nconsole.log('Gauntlet', Gauntlet);\n// declare global variables that will be used in player constructor\nvar playerName;\nvar playerClass;\nvar playerWeapon;\nvar P1,P2;\n\n$(document).ready(function() {\n  /*\n    Show the initial view that accepts player name\n   */\n  $(\"#player-setup\").show();\n\n  /*\n    When any button with card__link class is clicked,\n    move on to the next view.\n   */\n  $(\".card__link\").click(function(e) {\n    var nextCard = $(this).attr(\"next\");\n    var moveAlong = false;\n\n    switch (nextCard) {\n      case \"card--class\":\n        moveAlong = ($('#player-name').val() !== \"\");\n        break;\n      case \"card--weapon\":\n        moveAlong = playerClass;\n        break;\n      case \"card--battleground\":\n        moveAlong = playerWeapon;\n        break;\n    }\n\n    if (moveAlong) {\n      $(\".card\").hide();\n      $(\".\" + nextCard).show();\n    }\n\n    if (nextCard == \"card--class\") {\n      P1 = new Gauntlet.Combatants.Human();\n      $(\".class\").hide();\n      $(\"#surprise\").show();\n      for (var i = 0; i < P1.allowedClasses.length; i++) {\n        let currClass = P1.allowedClasses[i].toLowerCase();\n        if ($(`.card__button#${currClass}`)) {\n          $(`.card__button#${currClass}`).show();\n        }\n      }\n    }\n\n    if (nextCard == \"card--weapon\") {\n      P1.class = playerClass;\n      if (P1.class.magical) {\n        $(\"#weapon-select\").hide();\n        $(\"#spell-select\").show();\n      } else {\n        $(\"#weapon-select\").show();\n        $(\"#spell-select\").hide();\n      }\n    }\n\n    if (nextCard == \"card--battleground\") {\n      P1.playerName = playerName;\n      P1.possessivePronoun = \"his\";\n      console.log(P1);\n      P1.weapon = playerWeapon;\n      P2 = createMonster();\n      P1.originalHealth = P1.health;\n      P2.originalHealth = P2.health;\n      P1.playerNum = 1;\n      P2.playerNum = 2;\n      fillPlayers();\n      doBattle(P1,P2);\n    }\n  });\n\n  /*\n    When the back button clicked, move back a view\n   */\n  $(\".card__back\").click(function(e) {\n    var previousCard = $(this).attr(\"previous\");\n    $(\".card\").hide();\n    $(\".\" + previousCard).show();\n  });\n\n  // Store player name based on entry, on button click\n  $(\"[next='card--class']\").on('click', function(e) {\n    playerName = $('#player-name').val();\n  });\n\n  // Store player class based on user selection\n  $('.class').on('click', function (e) {\n    switch (e.currentTarget.id) {\n      case 'warrior':\n        playerClass = new Gauntlet.GuildHall.Warrior();\n        break;\n      case 'valkyrie':\n        playerClass = new Gauntlet.GuildHall.Valkyrie();\n        break;\n      case 'berserker':\n        playerClass = new Gauntlet.GuildHall.Berserker();\n        break;\n      case 'monk':\n        playerClass = new Gauntlet.GuildHall.Monk();\n        break;\n      case 'shaman':\n        playerClass = new Gauntlet.GuildHall.Shaman();\n        break;\n      case 'wizard':\n        playerClass = new Gauntlet.GuildHall.Wizard();\n        break;\n      case 'conjurer':\n        playerClass = new Gauntlet.GuildHall.Conjurer();\n        break;\n      case 'sorcerer':\n        playerClass = new Gauntlet.GuildHall.Sorcerer();\n        break;\n      case 'thief':\n        playerClass = new Gauntlet.GuildHall.Thief();\n        break;\n      case 'ninja':\n        playerClass = new Gauntlet.GuildHall.Ninja();\n        break;\n      case 'assassin':\n        playerClass = new Gauntlet.GuildHall.Assassin();\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Store player weapon based on user selection\n  $('.weapon').on('click', function (e) {\n    switch (e.currentTarget.id) {\n      case 'dagger':\n        playerWeapon = new Gauntlet.Armory.Dagger();\n        break;\n      case 'broad-sword':\n        playerWeapon = new Gauntlet.Armory.BroadSword();\n        break;\n      case 'war-axe':\n        playerWeapon = new Gauntlet.Armory.WarAxe();\n        break;\n      case 'sphere':\n        playerWeapon = new Gauntlet.SpellBook.Sphere();\n        break;\n      case 'cube':\n        playerWeapon = new Gauntlet.SpellBook.Cube();\n        break;\n      case 'tetrahedron':\n        playerWeapon = new Gauntlet.SpellBook.Tetrahedron();\n        break;\n      case 'cloud':\n        playerWeapon = new Gauntlet.SpellBook.Cloud();\n        break;\n      default:\n        break;\n    }\n  })\n});\n\nfunction fillPlayers() {\n  $(\".human h2\").html(P1.playerName);\n  $(\".monster h2\").html(P2.playerName);\n  var desc = `A ${P1.skinColor} skinned ${P1.species} ${P1.class.name} with ${P1.health} health.`;\n  if (P1.class.magical) {\n    desc += ` Able to cast ${P1.weapon.name} of ${P1.weapon.type}!`;\n  } else {\n    desc += ` Wielding a nasty ${P1.weapon.name}!`;\n  }\n  $(\".human .description\").html(desc);\n  $(\".human .stat1\").html(\"Str: \" + P1.strength);\n  $(\".human .stat2\").html(\"Int: \" + P1.intelligence);\n  $(\".human .stat3\").html(\"Agil: \" + P1.agility);\n  desc = `A ${P2.skinColor} skinned ${P2.species} ${P2.class.name} with ${P2.health} health.`;\n  if (P2.class.magical) {\n    desc += ` Able to cast ${P2.weapon.name} of ${P2.weapon.type}!`;\n  } else {\n    desc += ` Wielding a nasty ${P2.weapon.name}!`;\n  }\n  $(\".monster .description\").html(desc);\n  $(\".monster .stat1\").html(\"Str: \" + P2.strength);\n  $(\".monster .stat2\").html(\"Int: \" + P2.intelligence);\n  $(\".monster .stat3\").html(\"Agil: \" + P2.agility);\n}\n\nfunction createMonster() {\n  // create P2, a monster, randomly\n  var monsters = [\"Orc\", \"Hobgoblin\", \"Ogre\"];\n  // Get a random index from the monsters array\n  var random = Math.floor(Math.random() * monsters.length);\n  // Get the string at the index\n  var P2 = new Gauntlet.Combatants[monsters[random]];\n  var monsterNames = [{name:\"Pauly Shore\",       possessivePronoun:\"his\"},\n                      {name:\"Elvira\",            possessivePronoun:\"her\"},\n                      {name:\"Stephen Baldwin\",   possessivePronoun:\"his\"},\n                      {name:\"Gary Busey\",        possessivePronoun:\"his\"},\n                      {name:\"Dolph Lundgren\",    possessivePronoun:\"his\"},\n                      {name:\"Dennis Rodman\",     possessivePronoun:\"his\"},\n                      {name:\"Snooki\",            possessivePronoun:\"her\"},\n                      {name:\"Amy Winehouse\",     possessivePronoun:\"her\"},\n                      {name:\"William Shatner\",   possessivePronoun:\"his\"} ];\n  // Get a random index from the monsterNames array\n  var random = Math.floor(Math.random() * monsterNames.length);\n  // Get the string at the index\n  P2.playerName = monsterNames[random].name\n  P2.possessivePronoun = monsterNames[random].possessivePronoun;\n  P2.class = P2.generateClass();\n\n  // assign P2 a random weapon or spell\n  if (P2.class.magical) {\n    var weapons = [\"Sphere\", \"Cube\", \"Tetrahedron\", \"Cloud\"];\n    // Get a random index from the weapons array\n    var random = Math.floor(Math.random() * weapons.length);\n    // Get the string at the index\n    var randomWeapon = weapons[random];\n    P2.setWeapon(new Gauntlet.SpellBook[randomWeapon]);\n  } else {\n    var weapons = [\"Dagger\", \"BroadSword\", \"WarAxe\"];\n    // Get a random index from the weapons array\n    var random = Math.floor(Math.random() * weapons.length);\n    // Get the string at the index\n    var randomWeapon = weapons[random];\n    P2.setWeapon(new Gauntlet.Armory[randomWeapon]);\n  }\n\n  return P2;\n}\n","'use strict';\n\nlet GuildHall = {};\n\n/*\n  Base function for a player, or enemy, class (profession)\n */\nGuildHall.PlayerClass = function() {\n  this.name = \"Beggar\";\n  this.healthBonus = 0;\n  this.strengthBonus = 0;\n  this.intelligenceBonus = 0;\n  this.agilityBonus = 0;\n  this.magical = false;\n\n  this.toString = function() {\n    return this.name;\n  }\n};\n\n/*\n    FIGHTER CLASSES\n      - Warrior\n      - Valkyrie\n      - Berserker\n      - Monk\n */\nGuildHall.Fighter = function() {\n  this.healthBonus = 20;\n  this.strengthBonus = 10;\n};\nGuildHall.Fighter.prototype = new GuildHall.PlayerClass();\n\n\nGuildHall.Warrior = function() {\n  this.name = \"Warrior\";\n  this.healthBonus = this.healthBonus + 25;\n  this.strengthBonus = this.strengthBonus + 30;\n};\nGuildHall.Warrior.prototype = new GuildHall.Fighter();\n\n\nGuildHall.Valkyrie = function() {\n  this.name = \"Valkyrie\";\n  this.healthBonus = this.healthBonus + 20;\n  this.strengthBonus = this.strengthBonus + 10;\n};\nGuildHall.Valkyrie.prototype = new GuildHall.Fighter();\n\n\nGuildHall.Berserker = function() {\n  this.name = \"Berserker\";\n  this.healthBonus = this.healthBonus + 35;\n  this.strengthBonus = this.strengthBonus + 20;\n};\nGuildHall.Berserker.prototype = new GuildHall.Fighter();\n\n\nGuildHall.Monk = function() {\n  this.name = \"Monk\";\n  this.healthBonus = this.healthBonus + 10;\n  this.strengthBonus = this.strengthBonus + 40;\n};\nGuildHall.Monk.prototype = new GuildHall.Fighter();\n\n\n/*\n    MAGICAL CLASSES\n      - Shaman\n      - Wizard\n      - Conujurer\n      - Sorcerer\n */\nGuildHall.Mage = function() {\n  this.name = \"Mage\";\n  this.magical = true;\n  this.healthBonus = this.healthBonus - 10;\n  this.strengthBonus = this.strengthBonus - 20;\n  this.intelligenceBonus = this.intelligenceBonus + 20;\n};\nGuildHall.Mage.prototype = new GuildHall.PlayerClass();\n\n\nGuildHall.Shaman = function() {\n  this.name = \"Shaman\";\n  this.healthBonus = this.healthBonus + 5;\n  this.strengthBonus = this.strengthBonus - 10;\n  this.intelligenceBonus = this.intelligenceBonus + 20;\n};\nGuildHall.Shaman.prototype = new GuildHall.Mage();\n\n\nGuildHall.Wizard = function() {\n  this.name = \"Wizard\";\n  this.healthBonus = this.healthBonus - 15;\n  this.strengthBonus = this.strengthBonus - 25;\n  this.intelligenceBonus = this.intelligenceBonus + 40;\n};\nGuildHall.Wizard.prototype = new GuildHall.Mage();\n\n\nGuildHall.Conjurer = function() {\n  this.name = \"Conjurer\";\n  this.strengthBonus = this.strengthBonus - 10;\n  this.intelligenceBonus = this.intelligenceBonus + 10;\n};\nGuildHall.Conjurer.prototype = new GuildHall.Mage();\n\n\nGuildHall.Sorcerer = function() {\n  this.name = \"Sorcerer\";\n  this.healthBonus = this.healthBonus - 5;\n  this.strengthBonus = this.strengthBonus - 20;\n  this.intelligenceBonus = this.intelligenceBonus + 30;\n};\nGuildHall.Sorcerer.prototype = new GuildHall.Mage();\n\n\n/*\n    STEALTH CLASSES\n      - Thief\n      - Ninja\n      - Assassin\n */\n\nGuildHall.Eluder = function() {\n  this.name = \"Eluder\";\n  this.magical = false;\n  this.agilityBonus = this.agilityBonus + 10;\n  this.intelligenceBonus = this.intelligenceBonus + 35;\n};\n\nGuildHall.Eluder.prototype = new GuildHall.PlayerClass();\n\nGuildHall.Thief = function() {\n  this.name = \"Thief\";\n  this.agilityBonus = this.agilityBonus + 5;\n  this.intelligenceBonus = this.intelligenceBonus + 10;\n};\nGuildHall.Thief.prototype = new GuildHall.Eluder();\n\n\nGuildHall.Ninja = function() {\n  this.name = \"Ninja\";\n  this.agilityBonus = this.agilityBonus + 20;\n  this.intelligenceBonus = this.intelligenceBonus + 5;\n};\nGuildHall.Ninja.prototype = new GuildHall.Eluder();\n\n\nGuildHall.Assassin = function() {\n  this.name = \"Assassin\";\n  this.agilityBonus = this.agilityBonus + 10;\n  this.healthBonus = this.healthBonus - 5;\n  this.intelligenceBonus = this.intelligenceBonus + 5;\n};\nGuildHall.Assassin.prototype = new GuildHall.Eluder();\n\nmodule.exports = GuildHall;\n\n","'use strict';\n\nlet playerClasses = require('./classes');\nlet Combatants = {};\n\n/*\n  Define the base object for any player of Gauntlet,\n  whether a human player or a monster.\n */\nCombatants.Player = function(name) {\n  this.species = null;\n  this.class = null;\n  this.weapon = null;\n\n  this.playerName = name || \"unknown adventurer\";\n  this.health = Math.floor(Math.random() * 40 + 1 + 50);  // i.e. 1-40 plus 50\n  this.limbs = [\"head\", \"neck\", \"arm\", \"leg\", \"torso\"];\n  this.skinColors = [\"goldenrod\", \"cornflowerBlue\", \"chartreuse\", \"salmon\", \"lawnGreen\", \"fuchsia\", \"azure\", \"ghostWhite\", \"honeydew\"];\n  // Get a random index from the skinColors array\n  var random = Math.floor(Math.random() * this.skinColors.length);\n  // Get the string at the index\n  this.skinColor = this.skinColors[random];\n  this.strength = 90;\n  this.intelligence = 90;\n  this.agility = 50;\n  this.toString = function() {\n    var output = [this.playerName,\n      \": a \",\n      this.skinColor,\n      \" skinned \",\n      this.species,\n      \" \",\n      this.class,\n      \" with \",\n      this.health,\n      \" health. \",\n      (this.class.magical) ? \"Able to cast \" : \" Wielding a \",\n      // this.weapon.toString(),\n      \"!\"\n    ].join(\"\");\n    return output;\n  };\n};\n\nCombatants.Player.prototype.setWeapon = function(newWeapon) {\n  this.weapon = newWeapon;\n}\n\nCombatants.Player.prototype.generateClass = function() {\n  // Get a random index from the allowed classes array\n  var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n  // Get the string at the index\n  var randomClass = this.allowedClasses[random];\n\n  // Composes the corresponding player class into the player object\n  this.class = new playerClasses[randomClass]();\n\n  // Add the bonuses\n  this.health += this.class.healthBonus;\n  this.strength += this.class.strengthBonus;\n  this.intelligence += this.class.intelligenceBonus;\n  this.agility += this.class.agilityBonus;\n\n  return this.class;\n};\n\n/*\n  Define the base properties for a human in a\n  constructor function.\n */\nCombatants.Human = function() {\n  var randomSkin;\n\n  this.species = \"Human\";\n  this.intelligence = this.intelligence + 20;\n\n  // this.skinColors.push(\"brown\", \"red\", \"white\", \"disease\");\n  // randomSkin = Math.round(Math.random() * (this.skinColors.length-1));\n  // this.skinColor = this.skinColors[randomSkin];\n\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Wizard\", \"Monk\", \"Ninja\", \"Thief\", \"Sorcerer\"];\n};\nCombatants.Human.prototype = new Combatants.Player();\n\n/*\n  Define the base properties for a monster in a\n  constructor function.\n */\nCombatants.Monster = function() {\n  this.health = this.health - 30;\n  this.intelligence = this.intelligence -20;\n  this.strength = this.strength + 30;\n};\n\nCombatants.Monster.prototype = new Combatants.Player();\n\n\nCombatants.Orc = function() {\n  this.health = this.health + 20;\n  this.species = \"Orc\";\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Wizard\", \"Valkyrie\"];\n\n  this.generateClass = function() {\n    // Get a random index from the allowed classes array\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n    // Get the string at the index\n    var randomClass = this.allowedClasses[random];\n\n    // Composes the corresponding player class into the player object\n    this.class = new playerClasses[randomClass]();\n    return this.class;\n  }\n};\nCombatants.Orc.prototype = new Combatants.Monster();\n\nCombatants.Hobgoblin = function() {\n  this.health = this.health + 35;\n  this.agility = this.agility - 10;\n  this.species = \"Hobgoblin\";\n  this.allowedClasses = [\"Assassin\", \"Berserker\", \"Shaman\", \"Ninja\"];\n\n  this.generateClass = function() {\n    // Get a random index from the allowed classes array\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n    // Get the string at the index\n    var randomClass = this.allowedClasses[random];\n\n    // Composes the corresponding player class into the player object\n    this.class = new playerClasses[randomClass]();\n    return this.class;\n  }\n};\nCombatants.Hobgoblin.prototype = new Combatants.Monster();\n\nCombatants.Ogre = function() {\n  this.health = this.health + 50;\n  this.agility = this.agility -20;\n  this.species = \"Ogre\";\n  this.allowedClasses = [\"Warrior\", \"Sorcerer\", \"Monk\", \"Assassin\"];\n\n  this.generateClass = function() {\n    // Get a random index from the allowed classes array\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n    // Get the string at the index\n    var randomClass = this.allowedClasses[random];\n\n    // Composes the corresponding player class into the player object\n    this.class = new playerClasses[randomClass]();\n    return this.class;\n  }\n};\nCombatants.Ogre.prototype = new Combatants.Monster();\n\nmodule.exports = Combatants;\n","'use strict';\n\nconst GuildHall = require('./classes');\nconst Armory = require('./weapons');\nconst SpellBook = require('./spells');\nconst Combatants = require('./combatants');\n\nlet Gauntlet = {\n\tGuildHall, Armory, SpellBook, Combatants\n};\n\nmodule.exports = Gauntlet;","'use strict';\n\nlet SpellBook = {};\n\n/*\n  Base spell function that defines name, damage, damage type\n */\nSpellBook.Spell = function() {\n  this.name = \"\";\n  this.damage = 0;\n\n  this.damageTypes = [\"lightning\", \"fire\", \"water\", \"earth\", \"mysticism\"];\n  this.type = \"\";\n\n  this.toString = function() {\n    return this.name + \" of \" + this.type + \" for \" + this.damage + \" damage!\";\n  }\n};\n\n/*\n  An elemental sphere that can be cast by a magical class\n */\nSpellBook.Sphere = function() {\n  this.name = \"sphere\";\n  this.damage = Math.floor(Math.random() * 10 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nSpellBook.Sphere.prototype = new SpellBook.Spell();\n\n/*\n  An elemental sphere that can be cast by a magical class\n */\nSpellBook.Cube = function() {\n  this.name = \"cube\";\n  this.damage = Math.floor(Math.random() * 11 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nSpellBook.Cube.prototype = new SpellBook.Spell();\n/*\n  An elemental sphere that can be cast by a magical class\n */\nSpellBook.Tetrahedron = function() {\n  this.name = \"tetrahedron\";\n  this.damage = Math.floor(Math.random() * 12 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nSpellBook.Tetrahedron.prototype = new SpellBook.Spell();\n\n/*\n  An elemental cloud that can be cast by a magical class\n */\nSpellBook.Cloud = function() {\n  this.name = \"cloud\";\n  this.damage = Math.floor(Math.random() * 13 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nSpellBook.Cloud.prototype = new SpellBook.Spell();\n\nmodule.exports = SpellBook;","'use strict';\n\nlet Armory = {};\n\nArmory.Weapon = function() {\n  this.name = \"bare hands\";\n  this.damage = 1;\n  this.hands = 2;\n\n  this.toString = function() {\n    return this.name;\n  }\n};\n\nArmory.Dagger = function() {\n  this.name = \"dagger\";\n  this.damage = 10;\n  this.hands = 1;\n};\nArmory.Dagger.prototype = new Armory.Weapon();\n\nArmory.BroadSword = function() {\n  this.name = \"broad sword\";\n  this.damage = 14;\n  this.hands = 2;\n};\nArmory.BroadSword.prototype = new Armory.Weapon();\n\nArmory.WarAxe = function() {\n  this.name = \"war axe\";\n  this.damage = 18;\n  this.hands = 2;\n};\nArmory.WarAxe.prototype = new Armory.Weapon();\n\nmodule.exports = Armory;"]}