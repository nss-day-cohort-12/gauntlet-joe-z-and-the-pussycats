{"version":3,"sources":["../../node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/app.js","javascripts/classes.js","javascripts/createMonster.js","javascripts/doBattle.js","javascripts/enemies.js","javascripts/player.js","javascripts/spells.js","javascripts/weapons.js"],"names":[],"mappingszpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// declare global variables that will be used in player constructor\nvar playerName;\nvar playerClass;\nvar playerWeapon;\nvar P1,P2;\n\nvar Gauntlet = {};\n\nGauntlet.Armory = require('./weapons');\nconsole.log(`Armory Test: `, Gauntlet.Armory);\nGauntlet.SpellBook = require('./spells');\nconsole.log(`SpellBook Test: `, Gauntlet.SpellBook);\nGauntlet.GuildHall = require('./classes');\nconsole.log(`GuildHall Test: `, Gauntlet.GuildHall);\n\nGauntlet.Combatants = require('./enemies');\nconsole.log(`Combatants Test: `, Gauntlet.Combatants);\n\nvar createMonster = require('./createMonster');\nvar doBattle = require('./doBattle');\n\nconsole.log(`Gauntlet on app.js : `, Gauntlet);\n\nmodule.exports = Gauntlet;\n\n$(document).ready(function() {\n  /*\n    Show the initial view that accepts player name\n   */\n  $(\"#player-setup\").show();\n\n  /*\n    When any button with card__link class is clicked,\n    move on to the next view.\n   */\n  $(\".card__link\").click(function(e) {\n    var nextCard = $(this).attr(\"next\");\n    var moveAlong = false;\n\n    switch (nextCard) {\n      case \"card--class\":\n        moveAlong = ($('#player-name').val() !== \"\");\n        break;\n      case \"card--weapon\":\n        moveAlong = playerClass;\n        break;\n      case \"card--battleground\":\n        moveAlong = playerWeapon;\n        break;\n    }\n\n    if (moveAlong) {\n      $(\".card\").hide();\n      $(\".\" + nextCard).show();\n    }\n\n    if (nextCard == \"card--class\") {\n      P1 = new Gauntlet.Combatants.Human();\n      $(\".class\").hide();\n      $(\"#surprise\").show();\n      for (var i = 0; i < P1.allowedClasses.length; i++) {\n        currClass = P1.allowedClasses[i].toLowerCase();\n        if ($(`.card__button#${currClass}`)) {\n          $(`.card__button#${currClass}`).show();\n        }\n      }\n    }\n\n    if (nextCard == \"card--weapon\") {\n      P1.class = playerClass;\n      if (P1.class.magical) {\n        $(\"#weapon-select\").hide();\n        $(\"#spell-select\").show();\n      } else {\n        $(\"#weapon-select\").show();\n        $(\"#spell-select\").hide();\n      }\n    }\n\n    if (nextCard == \"card--battleground\") {\n      P1.playerName = playerName;\n      P1.possessivePronoun = \"his\";\n      P1.weapon = playerWeapon;\n      P2 = createMonster();\n      P1.originalHealth = P1.health;\n      P2.originalHealth = P2.health;\n      P1.playerNum = 1;\n      P2.playerNum = 2;\n      fillPlayers();\n      doBattle(P1,P2);\n    }\n  });\n\n  /*\n    When the back button clicked, move back a view\n   */\n  $(\".card__back\").click(function(e) {\n    var previousCard = $(this).attr(\"previous\");\n    $(\".card\").hide();\n    $(\".\" + previousCard).show();\n  });\n\n  // Store player name based on entry, on button click\n  $(\"[next='card--class']\").on('click', function(e) {\n    playerName = $('#player-name').val();\n  });\n\n  // Store player class based on user selection\n  $('.class').on('click', function (e) {\n    switch (e.currentTarget.id) {\n      case 'warrior':\n        playerClass = new Gauntlet.GuildHall.Warrior();\n        break;\n      case 'valkyrie':\n        playerClass = new Gauntlet.GuildHall.Valkyrie();\n        break;\n      case 'berserker':\n        playerClass = new Gauntlet.GuildHall.Berserker();\n        break;\n      case 'monk':\n        playerClass = new Gauntlet.GuildHall.Monk();\n        break;\n      case 'shaman':\n        playerClass = new Gauntlet.GuildHall.Shaman();\n        break;\n      case 'wizard':\n        playerClass = new Gauntlet.GuildHall.Wizard();\n        break;\n      case 'conjurer':\n        playerClass = new Gauntlet.GuildHall.Conjurer();\n        break;\n      case 'sorcerer':\n        playerClass = new Gauntlet.GuildHall.Sorcerer();\n        break;\n      case 'thief':\n        playerClass = new Gauntlet.GuildHall.Thief();\n        break;\n      case 'ninja':\n        playerClass = new Gauntlet.GuildHall.Ninja();\n        break;\n      case 'assassin':\n        playerClass = new Gauntlet.GuildHall.Assassin();\n        break;\n      default:\n        break;\n    }\n  });\n\n  // Store player weapon based on user selection\n  $('.weapon').on('click', function (e) {\n    switch (e.currentTarget.id) {\n      case 'dagger':\n        playerWeapon = new Gauntlet.Armory.Dagger();\n        break;\n      case 'broad-sword':\n        playerWeapon = new Gauntlet.Armory.BroadSword();\n        break;\n      case 'war-axe':\n        playerWeapon = new Gauntlet.Armory.WarAxe();\n        break;\n      case 'sphere':\n        playerWeapon = new Gauntlet.SpellBook.Sphere();\n        break;\n      case 'cube':\n        playerWeapon = new Gauntlet.SpellBook.Cube();\n        break;\n      case 'tetrahedron':\n        playerWeapon = new Gauntlet.SpellBook.Tetrahedron();\n        break;\n      case 'cloud':\n        playerWeapon = new Gauntlet.SpellBook.Cloud();\n        break;\n      default:\n        break;\n    }\n  });\n});\n\nfunction fillPlayers() {\n  $(\".human h2\").html(P1.playerName);\n  $(\".monster h2\").html(P2.playerName);\n  var desc = `A ${P1.skinColor} skinned ${P1.species} ${P1.class.name} with ${P1.health} health.`;\n  if (P1.class.magical) {\n    desc += ` Able to cast ${P1.weapon.name} of ${P1.weapon.type}!`;\n  } else {\n    desc += ` Wielding a nasty ${P1.weapon.name}!`;\n  }\n  $(\".human .description\").html(desc);\n  $(\".human .stat1\").html(\"Str: \" + P1.strength);\n  $(\".human .stat2\").html(\"Int: \" + P1.intelligence);\n  $(\".human .stat3\").html(\"Agil: \" + P1.agility);\n  desc = `A ${P2.skinColor} skinned ${P2.species} ${P2.class.name} with ${P2.health} health.`;\n  if (P2.class.magical) {\n    desc += ` Able to cast ${P2.weapon.name} of ${P2.weapon.type}!`;\n  } else {\n    desc += ` Wielding a nasty ${P2.weapon.name}!`;\n  }\n  $(\".monster .description\").html(desc);\n  $(\".monster .stat1\").html(\"Str: \" + P2.strength);\n  $(\".monster .stat2\").html(\"Int: \" + P2.intelligence);\n  $(\".monster .stat3\").html(\"Agil: \" + P2.agility);\n}","/*\n  TODO: Modularize this code with IIFE or Browserify\n */\nvar Gauntlet = Gauntlet || {};\nGauntlet.GuildHall = {};\n\nmodule.exports = Gauntlet.GuildHall;\n\n/*\n  Base function for a player, or enemy, class (profession)\n */\nGauntlet.GuildHall.PlayerClass = function() {\n  this.name = \"Beggar\";\n  this.healthBonus = 0;\n  this.strengthBonus = 0;\n  this.intelligenceBonus = 0;\n  this.agilityBonus = 0;\n  this.magical = false;\n\n  this.toString = function() {\n    return this.name;\n  };\n};\n\n/*\n    FIGHTER CLASSES\n      - Warrior\n      - Valkyrie\n      - Berserker\n      - Monk\n */\nGauntlet.GuildHall.Fighter = function() {\n  this.healthBonus = 20;\n  this.strengthBonus = 10;\n};\nGauntlet.GuildHall.Fighter.prototype = new Gauntlet.GuildHall.PlayerClass();\n\n\nGauntlet.GuildHall.Warrior = function() {\n  console.log(`test warrior created`);\n  this.name = \"Warrior\";\n  this.healthBonus = this.healthBonus + 25;\n  this.strengthBonus = this.strengthBonus + 30;\n};\nGauntlet.GuildHall.Warrior.prototype = new Gauntlet.GuildHall.Fighter();\n\n\nGauntlet.GuildHall.Valkyrie = function() {\n  this.name = \"Valkyrie\";\n  this.healthBonus = this.healthBonus + 20;\n  this.strengthBonus = this.strengthBonus + 10;\n};\nGauntlet.GuildHall.Valkyrie.prototype = new Gauntlet.GuildHall.Fighter();\n\n\nGauntlet.GuildHall.Berserker = function() {\n  this.name = \"Berserker\";\n  this.healthBonus = this.healthBonus + 35;\n  this.strengthBonus = this.strengthBonus + 20;\n};\nGauntlet.GuildHall.Berserker.prototype = new Gauntlet.GuildHall.Fighter();\n\n\nGauntlet.GuildHall.Monk = function() {\n  this.name = \"Monk\";\n  this.healthBonus = this.healthBonus + 10;\n  this.strengthBonus = this.strengthBonus + 40;\n};\nGauntlet.GuildHall.Monk.prototype = new Gauntlet.GuildHall.Fighter();\n\n\n/*\n    MAGICAL CLASSES\n      - Shaman\n      - Wizard\n      - Conujurer\n      - Sorcerer\n */\nGauntlet.GuildHall.Mage = function() {\n  this.name = \"Mage\";\n  this.magical = true;\n  this.healthBonus = this.healthBonus - 10;\n  this.strengthBonus = this.strengthBonus - 20;\n  this.intelligenceBonus = this.intelligenceBonus + 20;\n};\nGauntlet.GuildHall.Mage.prototype = new Gauntlet.GuildHall.PlayerClass();\n\n\nGauntlet.GuildHall.Shaman = function() {\n  this.name = \"Shaman\";\n  this.healthBonus = this.healthBonus + 5;\n  this.strengthBonus = this.strengthBonus - 10;\n  this.intelligenceBonus = this.intelligenceBonus + 20;\n};\nGauntlet.GuildHall.Shaman.prototype = new Gauntlet.GuildHall.Mage();\n\n\nGauntlet.GuildHall.Wizard = function() {\n  this.name = \"Wizard\";\n  this.healthBonus = this.healthBonus - 15;\n  this.strengthBonus = this.strengthBonus - 25;\n  this.intelligenceBonus = this.intelligenceBonus + 40;\n};\nGauntlet.GuildHall.Wizard.prototype = new Gauntlet.GuildHall.Mage();\n\n\nGauntlet.GuildHall.Conjurer = function() {\n  this.name = \"Conjurer\";\n  this.strengthBonus = this.strengthBonus - 10;\n  this.intelligenceBonus = this.intelligenceBonus + 10;\n};\nGauntlet.GuildHall.Conjurer.prototype = new Gauntlet.GuildHall.Mage();\n\n\nGauntlet.GuildHall.Sorcerer = function() {\n  this.name = \"Sorcerer\";\n  this.healthBonus = this.healthBonus - 5;\n  this.strengthBonus = this.strengthBonus - 20;\n  this.intelligenceBonus = this.intelligenceBonus + 30;\n};\nGauntlet.GuildHall.Sorcerer.prototype = new Gauntlet.GuildHall.Mage();\n\n\n/*\n    STEALTH CLASSES\n      - Thief\n      - Ninja\n      - Assassin\n */\n\nGauntlet.GuildHall.Eluder = function() {\n  this.name = \"Eluder\";\n  this.magical = false;\n  this.agilityBonus = this.agilityBonus + 10;\n  this.intelligenceBonus = this.intelligenceBonus + 35;\n};\n\nGauntlet.GuildHall.Eluder.prototype = new Gauntlet.GuildHall.PlayerClass();\n\nGauntlet.GuildHall.Thief = function() {\n  this.name = \"Thief\";\n  this.agilityBonus = this.agilityBonus + 5;\n  this.intelligenceBonus = this.intelligenceBonus + 10;\n};\nGauntlet.GuildHall.Thief.prototype = new Gauntlet.GuildHall.Eluder();\n\n\nGauntlet.GuildHall.Ninja = function() {\n  this.name = \"Ninja\";\n  this.agilityBonus = this.agilityBonus + 20;\n  this.intelligenceBonus = this.intelligenceBonus + 5;\n};\nGauntlet.GuildHall.Ninja.prototype = new Gauntlet.GuildHall.Eluder();\n\n\nGauntlet.GuildHall.Assassin = function() {\n  this.name = \"Assassin\";\n  this.agilityBonus = this.agilityBonus + 10;\n  this.healthBonus = this.healthBonus - 5;\n  this.intelligenceBonus = this.intelligenceBonus + 5;\n};\nGauntlet.GuildHall.Assassin.prototype = new Gauntlet.GuildHall.Eluder();\n\n\n","// createMonster()\n\nvar Gauntlet = require(\"./app\");\nGauntlet.Armory = require('./weapons');\nGauntlet.SpellBook = require('./spells');\nGauntlet.GuildHall = require('./classes');\nGauntlet.Combatants = require('./enemies');\n\nconsole.log(`Gauntlet createMonster: `, Gauntlet);\n\nmodule.exports = createMonster;\n\nfunction createMonster() {\n  // create P2, a monster, randomly\n  var monsters = [\"Orc\", \"Hobgoblin\", \"Ogre\"];\n  // Create a new random monster from the monsters array\n  var P2 = new Gauntlet.Combatants[monsters[randomNumber(monsters)]]();\n  var monsterNames = [{name:\"Pauly Shore\",       possessivePronoun:\"his\"},\n                      {name:\"Elvira\",            possessivePronoun:\"her\"},\n                      {name:\"Stephen Baldwin\",   possessivePronoun:\"his\"},\n                      {name:\"Gary Busey\",        possessivePronoun:\"his\"},\n                      {name:\"Dolph Lundgren\",    possessivePronoun:\"his\"},\n                      {name:\"Dennis Rodman\",     possessivePronoun:\"his\"},\n                      {name:\"Snooki\",            possessivePronoun:\"her\"},\n                      {name:\"Amy Winehouse\",     possessivePronoun:\"her\"},\n                      {name:\"William Shatner\",   possessivePronoun:\"his\"} ];\n  // Get the string at the index\n  var monsterNum = randomNumber(monsterNames);\n  P2.playerName = monsterNames[monsterNum].name;\n  P2.possessivePronoun = monsterNames[monsterNum].possessivePronoun;\n  P2.class = P2.generateClass();\n\n  var weapons, randomWeapon;\n\n  // assign P2 a random weapon or spell\n  if (P2.class.magical) {\n    weapons = [\"Sphere\", \"Cube\", \"Tetrahedron\", \"Cloud\"];\n    // Select a random weapon from the magic weapons array\n    randomWeapon = weapons[randomNumber(weapons)];\n    P2.setWeapon(new Gauntlet.SpellBook[randomWeapon]());\n  } else {\n    weapons = [\"Dagger\", \"BroadSword\", \"WarAxe\"];\n    // Select a random weapon from the melee weapons array\n    randomWeapon = weapons[randomNumber(weapons)];\n    P2.setWeapon(new Gauntlet.Armory[randomWeapon]());\n  }\n\n  return P2;\n}\n\n// Returns random number between 0 and the length of the passed array\nfunction randomNumber (array) {\n  return  Math.floor(Math.random() * array.length);\n}","module.exports = doBattle;\n\nfunction doBattle(P1,P2) {\n  // P1 is the player's character\n  report(`You are ${P1.playerName}, a ${P1.skinColor} skinned ${P1.species} ${P1.class.name} with ${P1.health} health.`);\n  if (P1.class.magical) {\n    report(`${P1.playerName} is able to cast ${P1.weapon.name} of ${P1.weapon.type}!`);\n  } else {\n    report(`${P1.playerName} is wielding a nasty ${P1.weapon.name}!`);\n  }\n  // P2 is the monster\n  report(`Your opponent is ${P2.playerName}, a ${P2.skinColor} skinned ${P2.species} ${P2.class.name} with ${P2.health} health.`);\n  if (P2.class.magical) {\n    report(`${P2.playerName} is able to cast ${P2.weapon.name} of ${P2.weapon.type}!`);\n  } else {\n    report(`${P2.playerName} is wielding a nasty ${P2.weapon.name}!`);\n  }\n\n  report(\"It's on!!!\");\n\n  var playerAttacking = coinFlip() + 1;  // 1 or 2\n  var goesFirst = playerAttacking === 1 ? P1.playerName : P2.playerName;\n\n  report(`${goesFirst} wins the coin flip and will go first.`);\n  report(\". . .\",\"center\");\n\n  if (playerAttacking === 2) {\n    doAnotherAttack = attack(P2,P1);\n    if (!doAnotherAttack) {\n      gameOver();\n    }\n  }\n\n  // activate listener on \"Attack\" button\n  $(\"#attackBtn\").on(\"click\",function(){\n    doAnotherAttack = attack(P1,P2);  // player attacks monster\n    if(!doAnotherAttack) {\n      gameOver();\n    } else {\n      doAnotherAttack = attack(P2,P1);  // monster attacks player\n      if(!doAnotherAttack) {\n        gameOver();\n      }\n    }\n  });\n}\n\nfunction gameOver() {\n  report(\" * * * GAME OVER * * *\",\"center\");\n  $(\"#attackBtn\").prop(\"disabled\",true);  // disable Attack button\n  $(\"#attackBtn\").off(\"click\");  // turn off event listener\n}\n\nfunction coinFlip() {\n  return Math.floor(Math.random() * 2);  // 0 or 1\n}\n\nfunction attack(attacker,defender) {\n  var justification = attacker.playerNum === 1 ? \"left\" : \"right\";\n  report(`${attacker.playerName} is attacking ${defender.playerName}.`,justification);\n\n  if (attacker.class.magical) {\n    report(`${attacker.playerName} casts a ${attacker.weapon.name} of ${attacker.weapon.type}...`,justification);\n  } else {\n    report(`${attacker.playerName} lunges with ${attacker.possessivePronoun} ${attacker.weapon.name}...`,justification);\n  }\n\n  // does defender successfully evade?\n  if (rollDice() <= defender.agility) {\n    report(`${defender.playerName} evades the attack!  Zero damage.`,justification);\n    report(\". . .\",\"center\");  // blank line\n    return true;  // doAnotherAttack = true\n  }\n\n  // defender takes damage\n  var damage = Math.floor(Math.random() * attacker.weapon.damage + 1);  // base damage\n  if (attacker.class.magical) {\n    damage += Math.round(damage * attacker.intelligence / 50);  // damage adjustment\n    report(`and does ${damage} points of damage!`,justification);\n  } else {\n    damage += Math.round(damage * attacker.strength / 50);  // damage adjustment\n    // Get a random index from the limbs array\n    var random = Math.floor(Math.random() * defender.limbs.length);\n    // Get the string at the index\n    var randomLimb = defender.limbs[random];\n    report(`and strikes ${defender.playerName} in the ${randomLimb} for ${damage} points of damage!`,justification);\n  }\n  report(`${defender.playerName} goes from ${defender.health} health to ${defender.health - damage} health.`,justification);\n  report(\". . .\",\"center\");  // blank line\n  defender.health -= damage;\n  var pct = Math.round(100 * (defender.health / defender.originalHealth));\n  if (pct < 0) {\n    pct = 0;\n  }\n  if (defender.playerNum == 2) {  // defender is monster?\n    $(\".monster .bar\").css(\"width\",`${pct}%`);\n  } else {\n    $(\".human .bar\").css(\"width\",`${pct}%`);\n  }\n\n  // did defender die?\n  if (defender.health <= 0) {\n    report(`${attacker.playerName} has defeated ${defender.playerName}!`,\"center\");\n    return false;  // don't do another attack -- it's over!\n  } else {\n    return true;  // doAnotherAttack = true\n  }\n}\n\nfunction rollDice() {\n  return Math.floor(Math.random() * 100);  // 0 to 99\n}\n\nfunction report(text,justification) {\n  if (!justification) {\n    justification = \"left\";\n  }\n  var oldTxt = $(\".combat-log-text\").html();\n  $(\".combat-log-text\").html(oldTxt + `<p style='text-align:${justification}'>${text}</p>`);\n  $(\".combat-log\").scrollTop($(\".combat-log-text\").height());\n  console.log(text);\n}","var Gauntlet = require(\"./player\");\n\nconsole.log(`enemies Gauntlet test: `, Gauntlet);\nmodule.exports = Gauntlet.Combatants;\n\nGauntlet.Combatants.Orc = function() {\n  this.health = this.health + 20;\n  this.species = \"Orc\";\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Wizard\", \"Valkyrie\"];\n\n  this.generateClass = function() {\n    // Get a random index from the allowed classes array\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n    // Get the string at the index\n    var randomClass = this.allowedClasses[random];\n\n    // Composes the corresponding player class into the player object\n    this.class = new Gauntlet.GuildHall[randomClass]();\n    return this.class;\n  };\n};\nGauntlet.Combatants.Orc.prototype = new Gauntlet.Combatants.Monster();\n\nGauntlet.Combatants.Hobgoblin = function() {\n  this.health = this.health + 35;\n  this.agility = this.agility - 10;\n  this.species = \"Hobgoblin\";\n  this.allowedClasses = [\"Assassin\", \"Berserker\", \"Shaman\", \"Ninja\"];\n\n  this.generateClass = function() {\n    // Get a random index from the allowed classes array\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n    // Get the string at the index\n    var randomClass = this.allowedClasses[random];\n\n    // Composes the corresponding player class into the player object\n    this.class = new Gauntlet.GuildHall[randomClass]();\n    return this.class;\n  };\n};\nGauntlet.Combatants.Hobgoblin.prototype = new Gauntlet.Combatants.Monster();\n\nGauntlet.Combatants.Ogre = function() {\n  this.health = this.health + 50;\n  this.agility = this.agility -20;\n  this.species = \"Ogre\";\n  this.allowedClasses = [\"Warrior\", \"Sorcerer\", \"Monk\", \"Assassin\"];\n\n  this.generateClass = function() {\n    // Get a random index from the allowed classes array\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n    // Get the string at the index\n    var randomClass = this.allowedClasses[random];\n\n    // Composes the corresponding player class into the player object\n    this.class = new Gauntlet.GuildHall[randomClass]();\n    return this.class;\n  };\n};\nGauntlet.Combatants.Ogre.prototype = new Gauntlet.Combatants.Monster();","var Gauntlet = Gauntlet || {};\nGauntlet.GuildHall = require(\"./classes\");\nGauntlet.Combatants = {};\nconsole.log(`Gauntlet on player: `, Gauntlet);\nconsole.log(`GuildHall on player: `, Gauntlet.GuildHall);\n\nmodule.exports = Gauntlet;\n\nGauntlet.Combatants.Player = function(name) {\n  this.species = null;\n  this.class = null;\n  this.weapon = null;\n\n  this.playerName = name || \"unknown adventurer\";\n  this.health = Math.floor(Math.random() * 40 + 1 + 50);  // i.e. 1-40 plus 50\n  this.limbs = [\"head\", \"neck\", \"arm\", \"leg\", \"torso\"];\n  this.skinColors = [\"goldenrod\", \"cornflowerBlue\", \"chartreuse\", \"salmon\", \"lawnGreen\", \"fuchsia\", \"azure\", \"ghostWhite\", \"honeydew\"];\n  // Get a random index from the skinColors array\n  var random = Math.floor(Math.random() * this.skinColors.length);\n  // Get the string at the index\n  this.skinColor = this.skinColors[random];\n  this.strength = 90;\n  this.intelligence = 90;\n  this.agility = 50;\n  this.toString = function() {\n    var output = [this.playerName,\n      \": a \",\n      this.skinColor,\n      \" skinned \",\n      this.species,\n      \" \",\n      this.class,\n      \" with \",\n      this.health,\n      \" health. \",\n      (this.class.magical) ? \"Able to cast \" : \" Wielding a \",\n      \"!\"\n    ].join(\"\");\n    return output;\n  };\n};\n\nGauntlet.Combatants.Player.prototype.setWeapon = function(newWeapon) {\n  this.weapon = newWeapon;\n};\n\nGauntlet.Combatants.Player.prototype.generateClass = function() {\n  // Get a random index from the allowed classes array\n  var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\n\n  // Get the string at the index\n  var randomClass = this.allowedClasses[random];\n\n  // Composes the corresponding player class into the player object\n  this.class = new Gauntlet.GuildHall[randomClass]();\n\n  // Add the bonuses\n  this.health += this.class.healthBonus;\n  this.strength += this.class.strengthBonus;\n  this.intelligence += this.class.intelligenceBonus;\n  this.agility += this.class.agilityBonus;\n\n  return this.class;\n};\n\nGauntlet.Combatants.Human = function() {\n  var randomSkin;\n\n  this.species = \"Human\";\n  this.intelligence = this.intelligence + 20;\n\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Wizard\", \"Monk\", \"Ninja\", \"Thief\", \"Sorcerer\"];\n};\nGauntlet.Combatants.Human.prototype = new Gauntlet.Combatants.Player();\n\nGauntlet.Combatants.Monster = function() {\n  this.health = this.health - 30;\n  this.intelligence = this.intelligence -20;\n  this.strength = this.strength + 30;\n};\n\nGauntlet.Combatants.Monster.prototype = new Gauntlet.Combatants.Player();","/*\n  TODO: Modularize this code with IIFE or Browserify\n */\nvar Gauntlet = Gauntlet || {};\nGauntlet.SpellBook = {};\n\nmodule.exports = Gauntlet.SpellBook;\n\n\n/*\n  Base spell function that defines name, damage, damage type\n */\nGauntlet.SpellBook.Spell = function() {\n  this.name = \"\";\n  this.damage = 0;\n\n  this.damageTypes = [\"lightning\", \"fire\", \"water\", \"earth\", \"mysticism\"];\n  this.type = \"\";\n\n  this.toString = function() {\n    return this.name + \" of \" + this.type + \" for \" + this.damage + \" damage!\";\n  };\n};\n\n/*\n  An elemental sphere that can be cast by a magical class\n */\nGauntlet.SpellBook.Sphere = function() {\n  this.name = \"sphere\";\n  this.damage = Math.floor(Math.random() * 10 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nGauntlet.SpellBook.Sphere.prototype = new Gauntlet.SpellBook.Spell();\n\n/*\n  An elemental sphere that can be cast by a magical class\n */\nGauntlet.SpellBook.Cube = function() {\n  this.name = \"cube\";\n  this.damage = Math.floor(Math.random() * 11 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nGauntlet.SpellBook.Cube.prototype = new Gauntlet.SpellBook.Spell();\n/*\n  An elemental sphere that can be cast by a magical class\n */\nGauntlet.SpellBook.Tetrahedron = function() {\n  this.name = \"tetrahedron\";\n  this.damage = Math.floor(Math.random() * 12 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nGauntlet.SpellBook.Tetrahedron.prototype = new Gauntlet.SpellBook.Spell();\n\n/*\n  An elemental cloud that can be cast by a magical class\n */\nGauntlet.SpellBook.Cloud = function() {\n  this.name = \"cloud\";\n  this.damage = Math.floor(Math.random() * 13 + 10);\n\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\n  this.type = this.damageTypes[random];\n};\nGauntlet.SpellBook.Cloud.prototype = new Gauntlet.SpellBook.Spell();","\nvar Gauntlet = Gauntlet || {};\nGauntlet.Armory = {};\n\nGauntlet.Armory.Weapon = function() {\n  this.name = \"bare hands\";\n  this.damage = 1;\n  this.hands = 2;\n\n  this.toString = function() {\n    return this.name;\n  };\n};\n\nGauntlet.Armory.Dagger = function() {\n  this.name = \"dagger\";\n  this.damage = 10;\n  this.hands = 1;\n};\nGauntlet.Armory.Dagger.prototype = new Gauntlet.Armory.Weapon();\n\nGauntlet.Armory.BroadSword = function() {\n  this.name = \"broad sword\";\n  this.damage = 14;\n  this.hands = 2;\n};\nGauntlet.Armory.BroadSword.prototype = new Gauntlet.Armory.Weapon();\n\nGauntlet.Armory.WarAxe = function() {\n  this.name = \"war axe\";\n  this.damage = 18;\n  this.hands = 2;\n};\nGauntlet.Armory.WarAxe.prototype = new Gauntlet.Armory.Weapon();\n\nmodule.exports = Gauntlet.Armory;\n"]}